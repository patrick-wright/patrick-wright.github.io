<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Patrick Wright's Blog]]></title>
  <link href="http://patrick-wright.github.io/atom.xml" rel="self"/>
  <link href="http://patrick-wright.github.io/"/>
  <updated>2015-04-24T09:14:18-07:00</updated>
  <id>http://patrick-wright.github.io/</id>
  <author>
    <name><![CDATA[Patrick Wright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Loading Dynamic Chef Resource Attributes]]></title>
    <link href="http://patrick-wright.github.io/blog/2015/04/23/loading-dynamic-chef-resource-attributes/"/>
    <updated>2015-04-23T09:56:38-07:00</updated>
    <id>http://patrick-wright.github.io/blog/2015/04/23/loading-dynamic-chef-resource-attributes</id>
    <content type="html"><![CDATA[<h2>The Scenario</h2>

<p>I had created an LWRP that defined a standard attribute. That same attribute value
could also be assigned by the provider. For example:</p>

<h4>Chef Resource snippet</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">attribute</span> <span class="ss">:file_cache_path</span><span class="p">,</span> <span class="ss">kind_of</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">attribute</span> <span class="ss">:local_path</span><span class="p">,</span> <span class="ss">kind_of</span><span class="p">:</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Chef Provider snippet</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artifact</span> <span class="o">=</span> <span class="n">some_method_that_queries_for_an_artifact</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_resource</span><span class="o">.</span><span class="n">local_path</span><span class="p">(</span><span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new_resource</span><span class="o">.</span><span class="n">file_cache_path</span><span class="p">,</span>
</span><span class='line'>  <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">artifact</span><span class="o">.</span><span class="n">download_uri</span><span class="p">)))</span> <span class="k">if</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">local_path</span><span class="o">.</span><span class="n">nil?</span>
</span></code></pre></td></tr></table></div></figure>


<p>This statement will set <code>local_path</code> on <code>new_resource</code> if it was not set by the resource, or it will be assigned
a valid path dynamically generated during the chef client run.</p>

<h4>Chef Recipe Option 1 - Common Approach</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/tmp/file.path&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># assume this resource accepts a project name,</span>
</span><span class='line'><span class="c1"># queries for the latest version,</span>
</span><span class='line'><span class="c1"># and downloads the file to `local_path`</span>
</span><span class='line'><span class="n">artifactory_artifact</span> <span class="s1">&#39;my-artifact&#39;</span>
</span><span class='line'>  <span class="n">local_path</span> <span class="n">path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s1">&#39;my-artifact&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Chef Recipe Option 2 - Initial Expectation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artifact</span> <span class="o">=</span> <span class="n">artifactory_artifact</span> <span class="s1">&#39;my-artifact&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s1">&#39;my-artifact&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">artifact</span><span class="o">.</span><span class="n">local_path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example fails.  <code>artifact</code> will be assigned at compile time.  Since <code>local_path</code> has not been
set, it will be set to the attribute&rsquo;s default value. In this case <code>nil</code>.  I had initially expected the provider code
snippet above to properly set <code>local_path</code> before realizing that it is being executed after <code>artifact</code> instance is
assigned.</p>

<h2>The Solution</h2>

<p>I was able to pick the brain of my colleague, Joshua Timberman.  He enlightened me of the <code>resources</code> DSL recipe method.
Read more about the <a href="http://docs.chef.io/dsl_recipe.html#resources">resources</a> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_resource</span> <span class="s1">&#39;name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">attr1</span> <span class="ss">:value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span><span class="p">(</span><span class="s1">&#39;my_resource[name]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr1</span> <span class="o">=&gt;</span> <span class="ss">:value</span>
</span><span class='line'><span class="n">resources</span><span class="p">(</span><span class="s1">&#39;my_resource[name]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr2</span> <span class="o">=&gt;</span> <span class="kp">nil</span> <span class="c1"># assume the provider sets this attribute</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will load the resource at compile time, but what we really want to do is load the resource during the chef client
run so we can load any changes that have been made by the provider.  We achieve this by calling the <code>lazy</code> attribute
evaluator. Read more about <a href="https://docs.chef.io/resources.html#lazy-attribute-evaluation">lazy attribute evaluation</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_resource</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">lazy</span> <span class="p">{</span> <span class="n">resources</span><span class="p">(</span><span class="s1">&#39;my_resource[name]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr2</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="ss">:dynamic_attribute</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Chef Recipe Option 2 - Solution</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artifactory_artifact</span> <span class="s1">&#39;my-artifact&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s1">&#39;my-artifact&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">lazy</span> <span class="p">{</span> <span class="n">resources</span><span class="p">(</span><span class="s1">&#39;artifactory_artifact[my-artifact]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">local_path</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>source</code> attribute will now be set to the <code>local_path</code> value dynamically assigned to the <code>new_resource</code>.</p>

<h4>Chef Recipe Option 2 - Optimized</h4>

<p>Recalling the syntax <code>lazy { resources('artifactory_artifact[my-artifact]').local_path }</code> could be quite annoying.
Add a helper library method. For this example <code>libraries/helpers.rb</code> will do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">artifactory_artifact_local_path</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lazy</span> <span class="p">{</span> <span class="n">resources</span><span class="p">(</span><span class="s2">&quot;artifactory_artifact[</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">local_path</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now call that method in the recipe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artifactory_artifact</span> <span class="s1">&#39;my-artifact&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s1">&#39;my-artifact&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">artifactory_artifact_local_path</span><span class="p">(</span><span class="s1">&#39;my-artifact&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Makes me meta-wonder&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_resource</span> <span class="s1">&#39;resource-name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">attribute_name</span> <span class="no">Chef</span><span class="o">::</span><span class="no">LazyResourceAttr</span><span class="o">.</span><span class="n">some_resource</span><span class="p">(</span><span class="s1">&#39;resource-name&#39;</span><span class="p">,</span> <span class="ss">:dynamic_attribute</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another project for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Kitchen Integration Helpers]]></title>
    <link href="http://patrick-wright.github.io/blog/2015/01/28/test-kitchen-integration-helpers/"/>
    <updated>2015-01-28T11:26:39-07:00</updated>
    <id>http://patrick-wright.github.io/blog/2015/01/28/test-kitchen-integration-helpers</id>
    <content type="html"><![CDATA[<h2>The Scenario</h2>

<p>I was developing some serverspec tests against a Test Kitchen fixture cookbook designed to exercise multiple configurations of my LWRP. The tests loaded a spec_helper for general configuration as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../kitchen/data/spec_helper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was an existing project so I continued the same pattern for my tests. The project test structure looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">test</span><span class="o">/</span><span class="n">integration</span><span class="o">/</span><span class="n">my_suite</span><span class="o">/</span><span class="n">serverspec</span><span class="o">/</span><span class="n">assert_something_spec</span><span class="o">.</span><span class="n">rb</span> <span class="c1"># the test</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span><span class="o">/</span><span class="n">shared</span><span class="o">/</span><span class="n">spec_helper</span><span class="o">.</span><span class="n">rb</span> <span class="c1"># the helper</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I was working back and forth in the tests and spec_helper I would execute <code>kitchen verify</code> to run the updated tests. I noticed that spec_helper.rb was not being updated, so I would have to:<br/>
a) run <code>kitchen converge</code> or<br/>
b) copy the file from my workstation to the kitchen node to the proper directory<br/>
Both are inefficient methods.</p>

<h2>The Solution</h2>

<p>Turns out the <code>kitchen verify</code> stage does update the spec_helper.rb as long as its in the correct directory. In the example of the serverspec tests I created the directory path <code>test/integration/helpers/serverspec</code> and moved spec_helper.rb file in the directory. Then I updated the tests to load spec_helper by adding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;./spec_helper&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The directory path convention will now do two things:<br/>
1. <code>kitchen verify</code> will update the spec_helper.rb (and other helper files)<br/>
2. spec_helper.rb will be copied into each serverspec suite directory allowing current
directory access.</p>

<h2>In Short</h2>

<p>Place all Kitchen helper files for your test frameworks into <code>test/integration/helpers/&lt;framework&gt;</code> and your tests will have CWD access.</p>
]]></content>
  </entry>
  
</feed>
