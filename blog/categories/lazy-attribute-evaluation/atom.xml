<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lazy Attribute Evaluation | Patrick Wright's Blog]]></title>
  <link href="http://patrick-wright.github.io/blog/categories/lazy-attribute-evaluation/atom.xml" rel="self"/>
  <link href="http://patrick-wright.github.io/"/>
  <updated>2015-04-24T09:14:18-07:00</updated>
  <id>http://patrick-wright.github.io/</id>
  <author>
    <name><![CDATA[Patrick Wright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Loading Dynamic Chef Resource Attributes]]></title>
    <link href="http://patrick-wright.github.io/blog/2015/04/23/loading-dynamic-chef-resource-attributes/"/>
    <updated>2015-04-23T09:56:38-07:00</updated>
    <id>http://patrick-wright.github.io/blog/2015/04/23/loading-dynamic-chef-resource-attributes</id>
    <content type="html"><![CDATA[<h2>The Scenario</h2>

<p>I had created an LWRP that defined a standard attribute. That same attribute value
could also be assigned by the provider. For example:</p>

<h4>Chef Resource snippet</h4>

<pre><code class="ruby">attribute :file_cache_path, kind_of: String, default: Chef::Config[:file_cache_path]

attribute :local_path, kind_of: String
</code></pre>

<h4>Chef Provider snippet</h4>

<pre><code class="ruby">artifact = some_method_that_queries_for_an_artifact

new_resource.local_path(::File.join(new_resource.file_cache_path,
  ::File.basename(artifact.download_uri))) if new_resource.local_path.nil?
</code></pre>

<p>This statement will set <code>local_path</code> on <code>new_resource</code> if it was not set by the resource, or it will be assigned
a valid path dynamically generated during the chef client run.</p>

<h4>Chef Recipe Option 1 - Common Approach</h4>

<pre><code class="ruby">path = '/tmp/file.path'

# assume this resource accepts a project name,
# queries for the latest version,
# and downloads the file to `local_path`
artifactory_artifact 'my-artifact'
  local_path path
end

package 'my-artifact' do
  source path
end
</code></pre>

<h4>Chef Recipe Option 2 - Initial Expectation</h4>

<pre><code class="ruby">artifact = artifactory_artifact 'my-artifact'

package 'my-artifact' do
  source artifact.local_path
end
</code></pre>

<p>This example fails.  <code>artifact</code> will be assigned at compile time.  Since <code>local_path</code> has not been
set, it will be set to the attribute&rsquo;s default value. In this case <code>nil</code>.  I had initially expected the provider code
snippet above to properly set <code>local_path</code> before realizing that it is being executed after <code>artifact</code> instance is
assigned.</p>

<h2>The Solution</h2>

<p>I was able to pick the brain of my colleague, Joshua Timberman.  He enlightened me of the <code>resources</code> DSL recipe method.
Read more about the <a href="http://docs.chef.io/dsl_recipe.html#resources">resources</a> method.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_resource</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">attr1</span> <span class="ss">:value</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;resources(&amp;lsquo;my_resource[name]&amp;rsquo;).attr1 =&gt; :value</span>
</span><span class='line'><span class="sr">resources(&amp;lsquo;my_resource[name]&amp;rsquo;).attr2 =&gt; nil # assume the provider sets this attribute</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This will load the resource at compile time, but what we really want to do is load the resource during the chef client
run so we can load any changes that have been made by the provider.  We achieve this by calling the <code>lazy</code> attribute
evaluator. Read more about <a href="https://docs.chef.io/resources.html#lazy-attribute-evaluation">lazy attribute evaluation</a>.</p>

<pre><code class="ruby">my_resource 'name'

lazy { resources('my_resource[name]').attr2 } =&gt; :dynamic_attribute
</code></pre>

<h4>Chef Recipe Option 2 - Solution</h4>

<pre><code class="ruby">artifactory_artifact 'my-artifact'

package 'my-artifact' do
  source lazy { resources('artifactory_artifact[my-artifact]').local_path }
end
</code></pre>

<p>The <code>source</code> attribute will now be set to the <code>local_path</code> value dynamically assigned to the <code>new_resource</code>.</p>

<h4>Chef Recipe Option 2 - Optimized</h4>

<p>Recalling the syntax <code>lazy { resources('artifactory_artifact[my-artifact]').local_path }</code> could be quite annoying.
Add a helper library method. For this example <code>libraries/helpers.rb</code> will do.</p>

<pre><code class="ruby">def artifactory_artifact_local_path(name)
  lazy { resources("artifactory_artifact[#{name}]").local_path }
end
</code></pre>

<p>Now call that method in the recipe.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artifactory_artifact</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">my</span><span class="o">-</span><span class="n">artifact</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;package &amp;lsquo;my-artifact&amp;rsquo; do</span>
</span><span class='line'><span class="sr">  source artifactory_artifact_local_path(&amp;lsquo;my-artifact&amp;rsquo;)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Makes me meta-wonder&hellip;
<code>ruby
some_resource 'resource-name' do
  attribute_name Chef::LazyResourceAttr.some_resource('resource-name', :dynamic_attribute)
end
</code></p>

<p>Another project for another day.</p>
]]></content>
  </entry>
  
</feed>
